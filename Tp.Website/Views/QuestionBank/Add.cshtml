@using Tp.Website.Helpers
@model Tp.Website.Models.QuestionBank.AddViewModel
@{
    ViewData["Title"] = "Add";
}

<div class="content-wrapper">
    @await Html.PartialAsync(MVC.Shared.Views._ContentHeader, Model.ContentHeaderViewModel)

    <div class="row">
        <div class="col-lg-4">
            <div class="card mb-3 @Model.BorderColourClass" id="js-question">
                <div class="card-header text-white @Model.BackgroundColourClass">
                    <em class="@Model.IconClass"></em> @Model.CategoryName
                </div>
                <div class="card-body">
                    <form method="post">
                        <input type="hidden" name="CategoryId" value="@Model.CategoryId" />
                        <div class="form-group">
                            <label>Question</label>
                            <textarea class="form-control" rows="3" name="Question"></textarea>
                            <div class="invalid-feedback" data-val-msg-for="Question"></div>
                        </div>
                        <div class="form-group">
                            <label>Correct Answer</label>
                            <div class="input-group">
                                <!-- <input class="form-control" name="CorrectAnswer"/> -->
                                <input class="form-control" name="CorrectAnswer"/>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary js-all-none" type="button" data-radio-id="js-all-none-correct">None/All</button>
                                </div>
                                <div class="invalid-feedback" data-val-msg-for="CorrectAnswer"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>1st Wrong Answer</label>
                            <div class="input-group">
                                <input class="form-control" name="WrongAnswer1"/>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary js-all-none" type="button" data-radio-id="js-all-none-wrong1">None/All</button>
                                </div>
                                <div class="invalid-feedback" data-val-msg-for="WrongAnswer1"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>2nd Wrong Answer</label>
                            <div class="input-group">
                                <input class="form-control" name="WrongAnswer2"/>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary js-all-none" type="button" data-radio-id="js-all-none-wrong2">None/All</button>
                                </div>
                                <div class="invalid-feedback" data-val-msg-for="WrongAnswer2"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label>3rd Wrong Answer</label>
                            <div class="input-group">
                                <input class="form-control" name="WrongAnswer3"/>
                                <div class="input-group-append">
                                    <button class="btn btn-outline-secondary js-all-none" type="button" data-radio-id="js-all-none-wrong3">None/All</button>
                                </div>
                            </div>
                            <div class="invalid-feedback" data-val-msg-for="WrongAnswer3"></div>
                        </div>
                        <div class="form-group d-none">
                            <label>All or None Style Answer</label>
                            <div class="c-radio">
                                <label>
                                    <input type="radio" name="allNone" value="0" id="js-all-none-none" checked/>
                                    <span class="fa fa-circle"></span>
                                    None
                                </label>
                            </div>
                            <div class="c-radio">
                                <label>
                                    <input type="radio" name="allNone" value="1" id="js-all-none-correct"/>
                                    <span class="fa fa-circle"></span>
                                    Correct Answer
                                </label>
                            </div>
                            <div class="c-radio">
                                <label>
                                    <input type="radio" name="allNone" value="2" id="js-all-none-wrong1"/>
                                    <span class="fa fa-circle"></span>
                                    1st Wrong Answer
                                </label>
                            </div>
                            <div class="c-radio">
                                <label>
                                    <input type="radio" name="allNone" value="3" id="js-all-none-wrong2"/>
                                    <span class="fa fa-circle"></span>
                                    2nd Wrong Answer
                                </label>
                            </div>
                            <div class="c-radio">
                                <label>
                                    <input type="radio" name="allNone" value="4" id="js-all-none-wrong3"/>
                                    <span class="fa fa-circle"></span>
                                    3rd Wrong Answer
                                </label>
                            </div>
                        </div>
                        @Html.ActionButtonGroupAddCancel(idSuffix: "question", addButtonText: "Question")
                    </form>

                </div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        var QUESTION_BANK__ADD = {
            init: function() {
                var app = QUESTION_BANK__ADD;
                $(document).on("click", ".js-all-none", app.allNoneButtonPressed);
                $(document).on("click", "#js-add-question", app.addQuestionPressed);
            },
            allNoneButtonPressed: function(event) {
                ////var app = QUESTION_BANK__ADD;
                var button = event.target;
                var isPressedAfter = $(button).hasClass("btn-outline-secondary");
                var radioButton = $(button).data("radio-id");
                console.log("Radio-id = " + radioButton);
                if (isPressedAfter) {
                    $(".js-all-none").removeClass("btn-success").addClass("btn-outline-secondary");
                    $(button).removeClass("btn-outline-secondary").addClass("btn-success");
                    $("#" + radioButton).click();
                } else {
                    $(button).removeClass("btn-success").addClass("btn-outline-secondary");
                    $("#js-all-none-none").click();
                }
            },
            addQuestionPressed: function (event) {
                debugger;
                var app = QUESTION_BANK__ADD;
                var submitButton = event.target;
                var wrapperId = "js-question";
                var controller = "QuestionBank";
                var action = "Add";
                UTILS.submitForm(submitButton, wrapperId, controller, action);
            }
        }
        $(document).ready(QUESTION_BANK__ADD.init);
       var UTILS = {
            submitForm: function(
                submitButton,
                formWrapperId,
                controller,
                action,
                successMessage,
                successDelegate,
                successDelegateOptions,
                failMessage,
                failDelegate,
                failDelegateOptions) {
                const $submitButton = $(submitButton);
                const $form = $(submitButton).closest("form");
                const $formWrapper = $("#" + formWrapperId);

                const $actionButtonGroup = $submitButton.closest(".action-button-group");
                if ($actionButtonGroup.length > 0) {
                    $actionButtonGroup.addClass("action_button_group--is-saving");
                }

                const postData = $form.serialize();

                $.ajax({
                    url: `/${controller}/${action}`,
                    data: postData,
                    method: 'POST',
                    success: function(result) {
                        $formWrapper.empty().replaceWith(result);
                        $(".tooltip").hide();
                        if (successMessage !== undefined) {
                            toastr.success(successMessage);
                        }
                        if (successDelegate !== undefined) {
                            successDelegate(successDelegateOptions);
                        }
                    },
                    error: function (result) {
                        debugger;
                        if ($actionButtonGroup.length > 0) {
                            $actionButtonGroup.removeClass(".action-button-group--is-saving");
                        }

                        if (failMessage !== undefined) {
                            toastr.error(failMessage);
                        }
                        if (failDelegate !== undefined) {
                            failDelegate(failDelegateOptions);
                        }
                        UTILS.ajaxError(result, formWrapperId);
                    }
                });
            },
            ajaxError: function(response, containerId) {
                switch (response.status) {
                    case 400:
                        if (containerId === undefined) {
                            UTILS.messageBoxOneOption({
                                title: UTILS.ajaxErrorTitle(response.status),
                                message: response.statusText
                            });
                        } else {
                            UTILS.displayModelStateErrors(containerId, response.responseJSON);
                        }
                        break;
                    default:
                        UTILS.messageBoxOneOption({
                            title: UTILS.ajaxErrorTitle(response.status),
                            message: response.statusText
                        });
                }
            },
            ajaxErrorTitle: function(httpStatusCode) {
                switch (httpStatusCode) {
                case 400:
                    return UTILS.icon("warning", "warning") + "Validation Failure";
                case 401:
                    return UTILS.icon("user-secret", "danger") + "Unauthorised";
                case 403:
                    return UTILS.icon("times-circle", "danger") + "Forbidden";
                case 404:
                    return UTILS.icon("times-circle", "danger") + "404 Not Found";
                case 409:
                    return "409 Conflict";
                case 410:
                    return UTILS.icon("times-circle", "info") + "410 Gone";
                case 418:
                    return UTILS.icon("coffee") + "418 I'm a teapot";
                case 500:
                    return UTILS.icon("frown-o", "danger") + "Internal Server Error";
                default:
                    return "Error " + httpStatusCode;
                }
            },
            icon: function(fontAwesomeIcon, context) {
                var icon = "<i class='icon-offset fa fa-" + fontAwesomeIcon;
                if (context !== undefined) {
                    icon += " text-" + context;
                }
                return icon + "'></i>";
            },
            displayModelStateErrors: function(containerId, errors) {
                var $container = $("#" + containerId);
                $container.find(".invalid-feedback").removeClass("d-block");

                var propNames = Object.keys(errors);
                $.each(propNames,
                    function(i, propName) {
                        var propErrors = errors[propName];
                        var message = "";
                        if (propErrors.length > 1) {
                            $.each(propErrors,
                                function(j, propError) {
                                    message += `<li>${propError}</li>`;
                                });
                            message = `<ul>${message}</ul>`;
                        } else {
                            message = propErrors[0];
                        }
                        $container.find(`[data-val-msg-for=${propName}]`)
                            .addClass("d-block")
                            .html(message);
                    });

            },
            messageBoxOneOption: function(params) {
                alert(params.title + "\n\n" + params.message);
            }
        }
    </script>
}

